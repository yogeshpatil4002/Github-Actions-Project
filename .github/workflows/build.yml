name: üî® Build, Analyze, and Push to ECR

on:
  push:
    branches:
      - main
      - dev
      - stg
      - prod

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  EMAIL_USER: ${{ secrets.EMAIL_USER }}
  EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
  EMAIL_TO: ${{ secrets.EMAIL_TO }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  build:
    name: üß™ Build & Analyze Pipeline
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üõ† Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üì¶ Install Dependencies
        run: |
          echo "Installing Node.js packages..."
          npm install
        working-directory: ./app

      - name: ‚úÖ Lint the Code
        run: |
          echo "Running linter..."
          npm run lint || echo "Lint warnings ignored"
        working-directory: ./app

      - name: üß™ Run Unit Tests
        run: |
          echo "Running tests..."
          npm test
        working-directory: ./app

      - name: üîç Run SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: ./app
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

      - name: üî¢ Semantic Versioning
        run: |
          echo "Running semantic-release..."
          npx semantic-release
        working-directory: ./app
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

      - name: ‚öôÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üê≥ Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REPO_NAME ./app

      - name: üè∑Ô∏è Tag Docker Image
        run: |
          echo "Tagging Docker image..."
          IMAGE_TAG=${{ github.ref_name }}-${{ github.sha }}
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/$ECR_REPO_NAME:$IMAGE_TAG"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker tag $ECR_REPO_NAME $IMAGE_URI

      - name: üõ°Ô∏è Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_URI }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: üì§ Push Docker Image to ECR
        run: |
          echo "Pushing Docker image to ECR..."
          docker push ${{ env.IMAGE_URI }}

      - name: üìß Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ env.EMAIL_USER }}
          password: ${{ env.EMAIL_PASS }}
          subject: "‚úÖ CI Build Completed for ${{ github.ref_name }}"
          to: ${{ env.EMAIL_TO }}
          from: ${{ env.EMAIL_USER }}
          body: |
            GitHub Actions build completed successfully.
            Docker image pushed: ${{ env.IMAGE_URI }}

      - name: üì¢ Send Slack Notification
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚úÖ *CI Build Success:* Branch `${{ github.ref_name }}` pushed to ECR.\nImage: `${{ env.IMAGE_URI }}`"}' \
          ${{ env.SLACK_WEBHOOK_URL }}
